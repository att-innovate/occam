#!/usr/bin/env ruby
###############################################################################
##                                                                           ##
## The MIT License (MIT)                                                     ##
##                                                                           ##
## Copyright (c) 2014 AT&T Inc.                                              ##
##                                                                           ##
## Permission is hereby granted, free of charge, to any person obtaining     ##
## a copy of this software and associated documentation files                ##
## (the "Software"), to deal in the Software without restriction, including  ##
## without limitation the rights to use, copy, modify, merge, publish,       ##
## distribute, sublicense, and/or sell copies of the Software, and to permit ##
## persons to whom the Software is furnished to do so, subject to the        ##
## conditions as detailed in the file LICENSE.                               ##
##                                                                           ##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS   ##
## OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                ##
## MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.    ##
## IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY      ##
## CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT ##
## OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR  ##
## THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                ##
##                                                                           ##
###############################################################################
#
# === Authors
#
# Kamil Swiatkowski <kswiatkowski@mirantis.com>
# Damian Szeluga <dszeluga@mirantis.com>
#
# === Copyright
#
# Copyright 2014 AT&T Foundry, unless otherwise noted.
#
#$0 = 'OccamEngine'

require 'rubygems'
require 'sinatra'
require 'sequel'
require 'yaml'
require 'json'
require 'optparse'
require 'logger'
require 'digest'
require 'json'
require 'macaddr'
require 'erb'
require 'puppet'
require 'mcollective'

include MCollective::RPC

def create_db_schema
  #delete all rows prior to drop tables (because of foreign keys)
  if $conf.init == true
    DB.drop_table? :nodes
    DB.drop_table? :reservations
    DB.drop_table? :roles
    DB.drop_table? :addresses
  end

  DB.create_table? :roles do
    primary_key :id
    String :role, :unique=>true
    String :puppet_class, :unique=>true
    Fixnum :max
    Fixnum :min
    Fixnum :count, :default=>0
    Fixnum :suffix, :default=>1
    Fixnum :reserved, :default=>0
    Fixnum :priority, :default=>100
    DateTime :created_at
    DateTime :updated_at
  end

  DB.create_table? :reservations do
    primary_key :id
    foreign_key :role_id, :roles
    String :mac, :unique=>true
    DateTime :created_at
    DateTime :updated_at
  end

  DB.create_table? :nodes do
    primary_key :id
    Fixnum :parent_id
    foreign_key :role_id, :roles
    String :mac, :unique=>true
    String :hostname, :unique=>true
    String :certname, :unique=>true
    String :ip
    String :state, :default=>'initial'
    String :aliases
    String :facter, :text=>true 
    Fixnum :puppet_initial_runs, :default=>0
    String :puppet_version
    String :puppet_status
    DateTime :puppet_run_at
    DateTime :created_at
    DateTime :updated_at
  end

end


class Configuration

  attr_reader :config_file
  attr_reader :init
  attr_reader :zone
  attr_reader :environment
  attr_reader :ops_mac
  attr_reader :ops_ip
  attr_reader :template_dir
  attr_reader :image_dir
  attr_reader :http_endpoint
  attr_reader :root_password
  #in config file
  attr_reader :db_path
  attr_reader :pidfile
  attr_reader :dnsmasq_pidfile
  attr_reader :domain
  attr_reader :dhcp_file
  attr_reader :dns_file
  attr_reader :reserved_vip_ips
  attr_reader :puppet_initial_runs
  #in hiera files
  attr_reader :roles  
  attr_reader :priv_interface
  attr_reader :vm_base
  attr_reader :starting_ip_mgmt
  attr_reader :networks
  #logger objects
  attr_reader :log
  attr_reader :loghttp

  def initialize
    
    #set config and init from command line opts
    @config = '/etc/occam/occamengine.yaml'
    @init = false
    OptionParser.new do |opts|
      opts.banner = "Usage: daemon.rb [options]"
      opts.on("-c","--config","--config CONFIG","Provide config file") do |v|
        @config = v
      end
      opts.on("-i","--init","Should we initialize?") do |v|
        @init = v
      end
    end.parse!

    #set zone
    if File.exists?('/etc/occam/zone')
      @zone = File.read('/etc/occam/zone').chop
    else
      @zone = `hostname -f `.split(".")[1]
    end
    
    # set environment
    if File.exists?('/etc/occam/environment')
      @environment = File.read('/etc/occam/environment').chop
    else
      @environment = 'production'
    end

    parsed_yamls = parse_yamls

    [
      'pidfile', 'logdir', 'dnsmasq_pidfile',
      'interval', 'dhcp_file', 'dns_file', 'roles', 'reserved_vip_ips',
      'priv_interface', 'vm_base', 'starting_ip_mgmt',
      'occamengine_dir', 'node_template', 'networks',
      'ops_ip', 'root_password', 'domain',
      'puppet_initial_runs'
    ].each do |c|
      instance_variable_set("@#{c}", parsed_yamls[c])
    end

    #set ops mac and ip addresses
    @ops_mac = [Mac.addr]
    @http_endpoint = "http://#{@ops_ip}:8160"

    if @root_password.nil?
      @root_password = 'secret'
    end

    if @node_template.nil?
      @node_template = 'default'
    end
    
    if @occamengine_dir.nil?
      @occamengine_dir = '/opt/ocamengine'
    end

    if @domain.nil?
      @domain = ''
    end
    
    @db_path = "#{@occamengine_dir}/db/occamengine.db"

    if @reserved_vip_ips.nil?
      @reserved_vip_ips = 0
    end

    if@puppet_initial_runs.nil?
      @puppet_initial_runs = 5
    end

    @template_dir = "#{@occamengine_dir}/pxe/#{@node_template}/templates"
    @image_dir = "#{@occamengine_dir}/pxe/#{@node_template}/image"

    if @roles['ops'] == nil
      @roles['ops'] = {:maximum => 1, :minimum => 1, :macs => @ops_mac, :priority => 1}
    end

    @log, @loghttp = configure_logger
    @log.info "Starting..."
    @log.debug "Configuration initialized"

  end

  def parse_yamls
    merged_yaml = {}
    [
      "/var/puppet/environments/#{@environment}/puppet/hiera/local/zones/#{@zone}.yaml",
      "/var/puppet/environments/#{@environment}/puppet/hiera/occam.yaml",
      @config
    ].each do |f| 
      merged_yaml = merged_yaml.merge(YAML.load_file(f))
    end
    #puts merged_yaml.inspect
    return merged_yaml
  end
  
  def configure_logger
    Logger.class_eval { alias :write :'<<' }
    if STDOUT.tty?
      log = Logger.new(STDOUT)
      log.level = Logger::DEBUG
      http_log = Logger.new(STDOUT)
      http_log.level = Logger::DEBUG
    else
      logfile_handler = File.open("#{@logdir}/occamengine.log", File::WRONLY | File::APPEND | File::CREAT)
      logfile_handler.sync = true
      log = Logger.new(logfile_handler)
      log.level = Logger::DEBUG
      http_logfile_handler = File.open("#{@logdir}/occamengine.http.log", File::WRONLY | File::APPEND | File::CREAT)
      http_logfile_handler.sync = true
      http_log = Logger.new(http_logfile_handler)
      http_log.level = Logger::DEBUG
    end
    log.progname = 'OccamEngine'
    return log, http_log
  end
  
end #class Configuration

$conf = Configuration.new()

class DnsDhcp

  def initialize
    $conf.log.debug "#{self} initialization"
    @dhcp_file = $conf.dhcp_file
    @dns_file = $conf.dns_file
    @dnsmasq_pidfile = $conf.dnsmasq_pidfile
  end

  def dir_exist(dir)
    if ! File.exists?(dir)
      $conf.log.debug "Directory #{dir} does not exist. Creating."
      Dir.mkdir(dir)
    end
  end

  def update
    write_files
    notify_dnsmasq
  end

  def notify_dnsmasq
    $conf.log.info "Sending SIGHUP to DNSmasq"
    begin
      Process.kill(1, File.read($conf.dnsmasq_pidfile).to_i)
    rescue Errno::ENOENT
      $conf.log.info "Can't read DNSmasq pidfile. Can't notify DNSmasq"
    end
  end

  def write_files
    ['/etc/hosts.d','/etc/dnsmasq.d'].each { |d| dir_exist(d) }
    dhcp_file_handler = File.open(@dhcp_file,'w')
    dns_file_handler = File.open(@dns_file,'w')
    Node.dataset.each do |n|
      nodealiases = ''
#      n.addresses.each do |a|
#        if a.ip == n.ip
#          #FIXME nodealiases += a.hostname
#        else
#          dns_file_handler.write("#{a.ip} #{a.hostname}\n")
#        end
#      end
      dns_file_handler.write("#{n.ip} #{n.hostname} #{n.aliases}\n")
      if ! n.mac.nil?
        dhcp_file_handler.write("#{n.mac},#{n.hostname},#{n.ip}\n")
      end
    end
    dhcp_file_handler.close
    dns_file_handler.close
  end

end #class DnsDhcp

$dnsdhcp = DnsDhcp.new()

Sequel::Model.plugin :timestamps, :update_on_create=>true
DB = Sequel.sqlite($conf.db_path)
create_db_schema

class Role < Sequel::Model

  def after_create
    super
    $conf.log.debug "Role #{self.role} created"
  end

  def after_update
    super
    $conf.log.debug "Role #{self.role} updated"
  end

end #class Role

class Node < Sequel::Model

  many_to_one :role
  many_to_one :parent, :class=>self
  one_to_many :children, :key=>:parent_id, :class=>self

  def after_update
    super
    $conf.log.debug "Node #{self.hostname} (#{self.mac}) updated"
    dnsmasq_keys = [:mac, :ip, :hostname, :aliases]
    if (@columns_updated.keys & dnsmasq_keys).any?
      $dnsdhcp.update
    end
  end

  def after_create
    super
    $conf.log.debug "Node #{self.hostname} (#{self.mac}) created"
    $dnsdhcp.update
    r = Role[self.role_id]
    if ! r.nil?
      r.update(:count => r.count + 1, :suffix => r.suffix + 1)
    end
  end

  def after_destroy
    super
    r = Role[self.role_id]
    if ! r.nil?
      r.update(:count => r.count - 1)
    end
  end

  def classify
    #check reservations
    begin
      reservation = Reservation.first!(:mac => self.mac)
      role = reservation.role
    rescue
      role = Role.where('count < ?', :max).where(:reserved => 0).order_by(:priority).first
    end
    if ! role.nil?
      self.role_id = role.id
      self.hostname = "#{role.role}#{role.suffix}"
      i = DB[:nodes].select(:ip).order_by(:ip).last[:ip]
      self.ip = $1 + ($2.to_i+1).to_s if i =~ /(\d+\.\d+\.\d+\.)(\d+)/
    end
  end

  def get_binding
    binding
  end

end #class Node

class Reservation < Sequel::Model
  many_to_one :role

  def after_create
    super
    $conf.log.debug "Reservation #{self.role.role}:#{self.mac} created"
  end

  def after_update
    super
    $conf.log.debug "Reservation #{self.role.role}:#{self.mac} updated"
  end

end #class Reservation

class DataBase
  def initialize
    $conf.log.debug "#{self} initialization"
    create_or_update_roles
    create_or_update_reservations
    create_or_update_nodes
    $conf.init == false #do we really need this?
  end

  def create_or_update_roles

    $conf.roles.each do |k,v|
      if v[:puppet_class].nil?
        role_puppet_class = "role::#{k}"
      else
        role_puppet_class = v[:puppet_class]
      end
      begin
        role = Role.first!(:role => k)
        role.min = v[:maximum]
        role.max = v[:maximum]
        role.priority = v[:priority]
        role.puppet_class = role_puppet_class
        role.save_changes
      rescue Exception => e 
        role = Role.new(:role => k, :priority => v[:priority], :max => v[:maximum], :min => v[:minimum], :puppet_class => role_puppet_class)
        role.save
      end
    end
  end

  def create_or_update_reservations
    $conf.roles.each do |k,v|
      Array(v[:macs]).each do |m|
        role = Role.first!(:role => k)
        begin
          reservation = Reservation.first!(:mac => m)
          reservation.role_id = role.id
          role.save_changes
        rescue Exception => e 
          reservation = Reservation.new(:mac => m, :role_id => role.id)
          reservation.save
        end
      end
    end
    $conf.roles.each do |k,v|
      #clean up old reservations
      role = Role.first!(:role => k)
      stale_reservations = DB[:reservations].where(:role_id => role.id).exclude(:mac => Array(v[:macs])).delete
      #update reserved field for role
      role.reserved = DB[:reservations].where(:role_id => role.id).count
      role.save
    end
  end

  def create_or_update_nodes
    role = Role.first!(:role => 'ops')
    begin
      node = Node.first!(:hostname => 'ops1')
      node.certname = "ops1.#{$conf.domain}"
      node.ip = $conf.ops_ip
      node.state = 'reserved'
      node.role_id = role.id
      node.aliases = 'puppet'
      node.puppet_initial_runs = $conf.puppet_initial_runs
      node.save_changes
    rescue Exception => e
      node = Node.new( 
                       :hostname => 'ops1',
                       :certname => "ops1.#{$conf.domain}",
                       :role_id => role.id,
                       :ip => $conf.ops_ip,
                       :mac => $conf.ops_mac,
                       :state => 'reserved',
                       :aliases => 'puppet',
                       :puppet_initial_runs => $conf.puppet_initial_runs
                       )
      node.save
    end

    for i in 1..$conf.reserved_vip_ips
      node_hostname = "vip#{i}"
      i = DB[:nodes].select(:ip).order_by(:ip).last[:ip]
      node_ip = $1 + ($2.to_i+1).to_s if i =~ /(\d+\.\d+\.\d+\.)(\d+)/
      node_state = 'reserved'
      begin
        node = Node.first!(:hostname => node_hostname)
        #node.ip = node_ip
        #node.state = node_state
        #node.save_changes
      rescue Exception => e
        node = Node.new(:hostname => node_hostname, :ip => node_ip, :state => node_state)
        node.save
      end
    end

  end

end # class DataBase

$db = DataBase.new()

class Adm
  def initialize
    $conf.log.debug "#{self} initialization"
  end

  def nodes
    $conf.log.info "#{self} classifying #{hostname}"
  end

  def node(hostname)
    $conf.log.info "#{self} classifying #{hostname}"
  end

end # class Enc

class Provisioner

  def initialize
    $conf.log.debug "#{self} initialization"
  end

  def get(mac)
    begin
      node = Node.first!(:mac => mac)
    rescue
      node = create(mac)
    end
    if node.nil?
      return nil
    elsif ['initial', 'os-install-start'].include? node.state
      boot_install(node)
    else
      boot_local(node)
    end
  end

  def create(mac)
    node = Node.new(:mac => mac)
    node.classify
    if node.role_id.nil?
      $conf.log.info "Node #{node.mac} not created. No more roles to allocate"
      return nil
    else
      node.save
      $conf.log.info "Node #{node.hostname} (#{node.mac}) created as #{node.role.role}"
      return node
    end
  end

  def create_addon_reservations(node, facts)
    valid_macs = []
    $conf.networks.each do |interface,properties|
      if ! facts["macaddress_#{interface}"].nil? and ! properties['suffix'].nil?
        ip_arr = properties['network'].split('.')
        ip_arr[3] = node.ip.split('.')[3]
        child_node_ip = ip_arr.join('.')
        child_node_hostname = "#{node.hostname}-#{properties['suffix']}"
        child_node_mac = facts["macaddress_#{interface}"]
        begin
          child_node = Node.first!(:mac => child_node_mac)
          child_node.ip = child_node_ip
          child_node.hostname = child_node_hostname
          child.node.parent_id = node.id
          child_node.save_changes
        rescue
          child_node = Node.new(:hostname => child_node_hostname, :parent_id => node.id, :ip => child_node_ip, :mac => child_node_mac, :state => 'child_node')
          child_node.save
        end
        valid_macs << child_node_mac
      end
    end
    stale_child_nodes = DB[:nodes].where(:parent_id => node.id).exclude(:mac => valid_macs).delete
  end

  def boot_install(node)
    $conf.log.info "Node #{node.hostname} (#{node.mac}) booting installer"
    node.state = 'initial'
    node.save
    b = node.get_binding
    b.eval("#{:http_endpoint} = '#{$conf.http_endpoint}'")
    return ERB.new(File.new("#{$conf.template_dir}/boot_install.erb").read).result(b)
  end

  def boot_local(node)
    $conf.log.info "Node #{node.hostname} (#{node.mac}) booting from local disk"
    return ERB.new(File.new("#{$conf.template_dir}/boot_local.erb").read).result(node.get_binding)
  end

  def preseed(hostname)
    begin
      $conf.log.debug "Serving preseed for #{hostname}"
      node = Node.first!(:hostname => hostname)
      b = node.get_binding
      b.eval("#{:http_endpoint} = '#{$conf.http_endpoint}'")
      b.eval("#{:root_password} = '#{$conf.root_password}'")
      b.eval("#{:ops_ip} = '#{$conf.ops_ip}'")
      return ERB.new(File.new("#{$conf.template_dir}/preseed.erb").read).result(b)
    rescue Exception => e 
      $conf.log.debug e.message
      return nil
    end
  end

  def callback(hostname, signal, body)
    states = ['initial', 'os-install-start', 'os-install-end', 'deployed']
    $conf.log.debug "Received callback #{signal} for #{hostname}"
    begin
      node = Node.first!(:hostname => hostname)
      current_state_idx = states.index(node.state)
      if signal == states[current_state_idx+1]
        $conf.log.info "Node #{hostname} state changed: #{node.state} -> #{signal}"
        node.state = signal
        if signal == 'deployed' and ! body.nil?
          begin
            facts= JSON.parse(body)
            create_addon_reservations(node, facts)
            node.certname = facts['fqdn']
            node.save
            Node.where(:state=>'deployed'){puppet_initial_runs > 1}.update(:puppet_initial_runs=>1)
          rescue Exception => e 
            $conf.log.debug e.message
          end
        else
          node.save
        end
        return signal
      else 
        return nil
      end
    rescue Exception => e 
      $conf.log.debug e.message
      return nil
    end
  end

  def enc(certname)
    begin
      node = Node.first!(:certname => certname)
      if node.puppet_initial_runs == 0
        puppet_class = 'role::initial'
      else
        puppet_class = node.role.puppet_class
      end
      $conf.log.info "#{node.hostname} served with class #{puppet_class}"
      return JSON.generate({:classes => [puppet_class]})
    rescue Exception => e 
      $conf.log.debug e.message
      return JSON.generate({:classes => nil})
    end
  end

  def puppetconf(hostname)
    begin
      $conf.log.debug "Serving puppet.conf for #{hostname}"
      node = Node.first!(:hostname => hostname)
      b = node.get_binding
      b.eval("#{:environment} = '#{$conf.environment}'")
      return ERB.new(File.new("#{$conf.template_dir}/puppetconf.erb").read).result(b)
    rescue Exception => e 
      $conf.log.debug e.message
      return nil
    end
  end

  def puppetreport(report_yaml)
    report =  YAML.load(report_yaml)
    begin
      node = Node.first!(:certname => report.host)
      if ['changed', 'unchanged'].include?(report.status) and node.puppet_initial_runs < $conf.puppet_initial_runs
        node.puppet_initial_runs = node.puppet_initial_runs + 1
      end
      node.puppet_version = report.puppet_version
      node.puppet_status = report.status
      node.puppet_run_at = DateTime.parse(report.time.to_s)
      node.save_changes
      $conf.log.info "Puppet finished on #{node.hostname} (#{report.host}) with status #{report.status}"
      puppetrun
      return 'OK'
    rescue Exception => e
      $conf.log.debug e.message
      $conf.log.info "Received puppet report from unknown host: #{report.host}"
      return nil
    end
  end

  def puppetrun
    runs_min = Node.where(:state=>'deployed').min(:puppet_initial_runs)
    runs_max = Node.where(:state=>'deployed').max(:puppet_initial_runs)
    if ! runs_min.nil? and runs_min < $conf.puppet_initial_runs
      begin
        node_to_run = Node.order(:created_at).first(:state => 'deployed', :puppet_initial_runs => runs_min).hostname
        $conf.log.info "Running puppet on node #{node_to_run}"
        mc = rpcclient('puppet')
        mc.verbose = false
        mc.progress = false
        mc.reset
        mc.discover( :nodes => [node_to_run] )
        mc.runonce
        mc.disconnect
      rescue Exception => e
        $conf.log.debug e.message
      end
    end
  end

end #class Pxe


$prov = Provisioner.new()

configure do
  set :port, 8160
  set :bind, '0.0.0.0'
  set :public_folder, $conf.image_dir
  set :static, true
  set :lock, true
  set :environment, :production
  use Rack::CommonLogger, $conf.loghttp
end


#Puppet
get '/api/puppet/enc/:certname' do
  response = $prov.enc(params[:certname])
  if ! response.nil?
    return response
  else
    status 404
  end
end
get '/api/puppet/conf/:hostname' do
  response = $prov.puppetconf(params[:hostname])
  if ! response.nil?
    return response
  else
    status 404
  end
end

post '/api/puppet/report' do
  response = $prov.puppetreport(request.body.read)
  if ! response.nil?
    return response
  else
    status 404
  end
end

# Deploy
get '/api/deploy/pxe/:mac' do
  response = $prov.get(params[:mac])
  if ! response.nil?
    return response
  else
    status 404
  end
end

get '/api/deploy/preseed/:hostname' do
  response = $prov.preseed(params[:hostname])
  if ! response.nil?
    return response
  else
    status 404
  end
end

get '/api/deploy/callback/:hostname/:signal' do
  response = $prov.callback(params[:hostname], params[:signal], '')
  if ! response.nil?
    return response
  else
    status 404
  end

end

post '/api/deploy/callback/:hostname/deployed' do
  response = $prov.callback(params[:hostname], 'deployed', request.body.read)
  if ! response.nil?
    return response
  else
    status 404
  end
end

get '/image/default/:file' do
  file = File.join($conf.image_dir, params[:file])
  puts file
  send_file( file )
end
